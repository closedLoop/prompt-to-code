datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_FULL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 10
}

model UserRequest {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map(name: "created_at")
  payload      String
  channel      String
  target_agent String
  user         User?    @relation(fields: [userId], references: [id])
  userId       Int?
}

model User {
  id                 Int            @id @default(autoincrement())
  name               String
  email              String?        @unique
  emailVerified      DateTime?      @map("email_verified")
  permissions        String[]
  image              String?
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  updatedAt          DateTime       @updatedAt @map(name: "updated_at")
  request_log        UserRequest[]
  stripe_customer_id String? // Optional field represented by str | None in the original Python model
  organizations      Organization[]
  orgowners          Organization[] @relation("owner_user")
  taskforces         TaskForce[]    @relation()
}

model AgentConfig {
  id             Int          @id @default(autoincrement())
  name           String
  config         Json
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Cluster {
  id              Int               @id @default(autoincrement())
  name            String
  spec            String
  config          Json
  taskforcelaunch TaskForceLaunch[]
}

model Organization {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  logo         String?
  url          String?
  owner_user   User?         @relation("owner_user", references: [id], fields: [owner_userId])
  task_forces  TaskForce[]
  users        User[]
  configs      AgentConfig[]
  agents       WorkerAgent[]
  owner_userId Int?
}

model Tool {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  params      Json
  Workflow    Workflow @relation(fields: [workflowId], references: [id])
  Role        Role     @relation(fields: [roleId], references: [id])
  workflowId  Int
  roleId      Int
}

model Task {
  id          Int         @id @default(autoincrement())
  action_item String
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  agent_id    Int
  parent_task String?
  agentwork   AgentWork[]
}

model AgentDecision {
  id          Int       @id @default(autoincrement())
  source      String
  target      String
  candidates  String[]
  state       String
  agentwork   AgentWork @relation(fields: [agentworkId], references: [id])
  agentworkId Int
}

model AgentAction {
  id            Int       @id @default(autoincrement())
  prev_step     String
  new_step      String
  state         String
  action        String
  action_params Json
  candidates    String[]
  output        Json
  side_effects  String[]
  costs         Json
  wall_time     Float
  cpu_time      Float
  memory        Float
  logs          String[]
  agentwork     AgentWork @relation(fields: [agentworkId], references: [id])
  agentworkId   Int
}

model AgentWork {
  id           Int             @id @default(autoincrement())
  started_at   DateTime
  completed_at DateTime?
  task         Task            @relation(fields: [task_id], references: [id])
  task_id      Int
  result       Json?
  decisions    AgentDecision[]
  actions      AgentAction[]
}

model Workflow {
  id             Int      @id @default(autoincrement())
  name           String
  machines       Json
  tools          Tool[]
  output_formats String[]
  role           Role     @relation(fields: [roleId], references: [id])
  roleId         Int
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  goal        String
  task_type   String
  workflows   Workflow[]
  tools       Tool[]
  workeragent WorkerAgent[]
}

model WorkerAgent {
  id              Int           @id @default(autoincrement())
  name            String
  logo            String?
  bio             String?
  role            Role?         @relation(fields: [role_id], references: [id])
  role_id         Int?
  config          Json?
  organization    Organization? @relation(fields: [organization_id], references: [id])
  taskforce       TaskForce[]
  leadagent       TaskForce[]   @relation("lead_agent")
  organization_id Int?
}

model TaskForce {
  id              Int           @id @default(autoincrement())
  name            String
  purpose         String
  description     String
  createdAt       DateTime      @default(now()) @map(name: "created_at")
  updatedAt       DateTime      @updatedAt @map(name: "updated_at")
  worker_agents   WorkerAgent[]
  leadagent       WorkerAgent?  @relation("lead_agent", fields: [leadagent_id], references: [id])
  leadagent_id    Int?
  users           User[]
  final_authority String?
  tools           Json
  comms           Json
  organization    Organization  @relation(references: [id], fields: [organization_id])
  organization_id Int
}

model TaskForceResults {
  id                   Int               @id @default(autoincrement())
  costs                Json
  metrics              Json
  actions              Json
  tool_usage           Json
  full_logs            Json
  main                 Json
  tasks                Json
  intra_task_decisions Json
  inter_task_decisions Json
  feedback             Json
  TaskForceLaunch      TaskForceLaunch[]
}

model TaskForceLaunch {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now()) @map(name: "created_at")
  updatedAt          DateTime         @updatedAt @map(name: "updated_at")
  status             String
  deadline           DateTime?
  budget             Float?
  config             Json
  environment        Cluster          @relation(fields: [environment_id], references: [id])
  environment_id     Int
  results            TaskForceResults @relation(fields: [taskForceResultsId], references: [id])
  api_endpoint       String
  chat_endpoint      String
  taskForceResultsId Int
}
